@using Shop.Mvc.Models.Pagination
@using System.Collections.Specialized;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.AspNetCore.Http.Extensions;
@model PaginationViewModel
@{
    int count = Model.PageCount;

    var rawurl = ViewContext.HttpContext.Request.GetDisplayUrl();

    var uri = new Uri(rawurl);
    var baseUri = uri.GetComponents(UriComponents.Scheme | UriComponents.Host | UriComponents.Port | UriComponents.Path, UriFormat.UriEscaped);

    var query = QueryHelpers.ParseQuery(uri.Query);

    var items = query.SelectMany(x => x.Value, (col, value) => new KeyValuePair<string, string>(col.Key, value)).ToList();

    items.RemoveAll(x => x.Key == "PageNumber"); // Remove all values for key
}
@if (Model.PageCount > 1)
{
    <div class="page">
        <ul class="pagination">
            @for (int i = 1; i <= Model.PageCount; i++)
            {
                var qb = new QueryBuilder(items);
                qb.Add("PageNumber", i.ToString());
                var fullUri = baseUri + qb.ToQueryString();
                if (i == Model.PageNumber)
                {
                    <li class="active"><a href="@(fullUri)">@(i)</a></li>
                }
                else
                {
                    <li><a href="@(fullUri)">@(i)</a></li>
                }
                items.RemoveAll(x => x.Key == "PageNumber"); // Remove all values for key
            }
        </ul>
    </div>
}
